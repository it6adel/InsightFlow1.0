-- ====================================================================
-- InsightFlow COD E-commerce Database Schema Setup (PostgreSQL - Fully Corrected)
-- ====================================================================

-- ====================================================================
-- InsightFlow COD E-commerce Database Schema Setup (Oracle Compatible)
-- ====================================================================

-- Categories Table
CREATE TABLE categories (
category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
category_name VARCHAR2(100) NOT NULL UNIQUE,
description CLOB
);
COMMENT ON TABLE categories IS 'Stores product categories like Electronics, Clothing, etc.';
COMMENT ON COLUMN categories.category_id IS 'Unique identifier for the category.';
COMMENT ON COLUMN categories.category_name IS 'Human-readable name of the category.';

-- Products Table
CREATE TABLE products (
product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
product_name VARCHAR2(255) NOT NULL,
category_id NUMBER REFERENCES categories(category_id) ON DELETE SET NULL,
unit_price NUMBER(10, 2) NOT NULL CHECK (unit_price >= 0),
unit_cost NUMBER(10, 2) CHECK (unit_cost >= 0),
sku VARCHAR2(100) UNIQUE,
description CLOB,
is_active NUMBER(1) DEFAULT 1,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE products IS 'Stores details about each product offered for sale.';
COMMENT ON COLUMN products.category_id IS 'Foreign key linking to the categories table.';
COMMENT ON COLUMN products.unit_cost IS 'The cost price of the product for the business.';
COMMENT ON COLUMN products.is_active IS 'Flag indicating if the product is currently available for purchase.';

-- Customers Table
CREATE TABLE customers (
customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
first_name VARCHAR2(100),
last_name VARCHAR2(100),
email VARCHAR2(255) UNIQUE NOT NULL,
phone VARCHAR2(50) NOT NULL,
signup_date DATE DEFAULT SYSDATE,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE customers IS 'Stores information about registered customers.';
COMMENT ON COLUMN customers.phone IS 'Customer phone number, vital for COD operations.';
COMMENT ON COLUMN customers.signup_date IS 'Date the customer registered.';

-- Addresses Table
CREATE TABLE addresses (
address_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
customer_id NUMBER NOT NULL REFERENCES customers(customer_id) ON DELETE CASCADE,
address_type VARCHAR2(20) DEFAULT 'Shipping' CHECK (address_type IN ('Shipping', 'Billing')),
street_address VARCHAR2(255) NOT NULL,
city VARCHAR2(100) NOT NULL,
state_province VARCHAR2(100),
postal_code VARCHAR2(20) NOT NULL,
country VARCHAR2(100) NOT NULL,
is_default NUMBER(1) DEFAULT 0,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE addresses IS 'Stores customer shipping and billing addresses. A customer can have multiple addresses.';
COMMENT ON COLUMN addresses.customer_id IS 'Foreign key linking to the customers table. Addresses are deleted if customer is deleted.';
COMMENT ON COLUMN addresses.is_default IS 'Indicates if this is the customer''s default address for the specified type.';

-- Promotions Table
CREATE TABLE promotions (
promo_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
promo_code VARCHAR2(50) UNIQUE NOT NULL,
description CLOB,
discount_type VARCHAR2(20) CHECK (discount_type IN ('Percentage', 'Fixed Amount')),
discount_value NUMBER(10, 2) NOT NULL CHECK (discount_value >= 0),
start_date DATE,
end_date DATE,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE promotions IS 'Stores details about promotional codes and discounts.';
COMMENT ON COLUMN promotions.start_date IS 'Date when the promotion becomes valid (NULL for indefinite start).';
COMMENT ON COLUMN promotions.end_date IS 'Date when the promotion expires (NULL for no expiry).';

-- Orders Table
CREATE TABLE orders (
order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
order_ref VARCHAR2(20) UNIQUE,
customer_id NUMBER REFERENCES customers(customer_id) ON DELETE SET NULL,
order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
order_status VARCHAR2(50) NOT NULL CHECK (order_status IN (
'Pending Confirmation', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered',
'Cancelled by Customer', 'Cancelled by Admin', 'Refused Delivery', 'Delivery Failed', 'Returned'
)),
shipped_at TIMESTAMP,
delivered_at TIMESTAMP,
cancelled_at TIMESTAMP,
last_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
cancellation_reason CLOB,
subtotal NUMBER(12, 2) NOT NULL CHECK (subtotal >= 0),
discount_amount NUMBER(12, 2) DEFAULT 0 CHECK (discount_amount >= 0),
shipping_cost NUMBER(10, 2) DEFAULT 0 CHECK (shipping_cost >= 0),
tax_amount NUMBER(10, 2) DEFAULT 0 CHECK (tax_amount >= 0),
order_total NUMBER(12, 2) NOT NULL CHECK (order_total >= 0),
shipping_address_id NUMBER NOT NULL REFERENCES addresses(address_id),
billing_address_id NUMBER REFERENCES addresses(address_id) ON DELETE SET NULL,
promo_id NUMBER REFERENCES promotions(promo_id) ON DELETE SET NULL,
notes CLOB
);
COMMENT ON TABLE orders IS 'Central transaction table, tracking COD order lifecycle and financials.';
COMMENT ON COLUMN orders.order_status IS 'Current stage of the order in the COD process.';
COMMENT ON COLUMN orders.shipped_at IS 'Timestamp when the order was handed to courier.';
COMMENT ON COLUMN orders.delivered_at IS 'Timestamp when the order was successfully delivered and paid.';
COMMENT ON COLUMN orders.cancelled_at IS 'Timestamp when order was cancelled or final delivery failed.';
COMMENT ON COLUMN orders.cancellation_reason IS 'Reason for order cancellation or failure.';
COMMENT ON COLUMN orders.order_total IS 'Final COD amount due at delivery.';

-- Order Items Table
CREATE TABLE order_items (
order_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
order_id NUMBER NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
product_id NUMBER NOT NULL REFERENCES products(product_id),
quantity NUMBER NOT NULL CHECK (quantity > 0),
price_per_unit NUMBER(10, 2) NOT NULL CHECK (price_per_unit >= 0),
cost_per_unit NUMBER(10, 2),
item_total NUMBER(12, 2)
);
COMMENT ON TABLE order_items IS 'Junction table linking orders and products; details items within an order.';
COMMENT ON COLUMN order_items.order_id IS 'Foreign key to orders. Items are deleted if parent order is deleted.';
COMMENT ON COLUMN order_items.product_id IS 'Foreign key to products. Prevents deleting a product if it is part of an order history.';
COMMENT ON COLUMN order_items.price_per_unit IS 'Price of the product unit at the time of order placement.';
COMMENT ON COLUMN order_items.cost_per_unit IS 'Cost of the product unit at the time of order placement for historical profit calculation.';
COMMENT ON COLUMN order_items.item_total IS 'Total for this line item (quantity * price_per_unit).';

-- Add trigger for item_total calculation
CREATE OR REPLACE TRIGGER trg_order_items_total
BEFORE INSERT OR UPDATE ON order_items
FOR EACH ROW
BEGIN
:NEW.item_total := :NEW.quantity * :NEW.price_per_unit;
END;
/

-- Web Sessions Table
CREATE TABLE web_sessions (
session_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
customer_id NUMBER REFERENCES customers(customer_id) ON DELETE SET NULL,
session_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
session_end TIMESTAMP,
ip_address VARCHAR2(45),
user_agent CLOB,
referrer_source VARCHAR2(255),
utm_campaign VARCHAR2(100),
utm_medium VARCHAR2(100)
);
COMMENT ON TABLE web_sessions IS 'Stores basic information about user visits to the website.';
COMMENT ON COLUMN web_sessions.customer_id IS 'Links session to a logged-in customer, if known. Null for guest sessions.';

-- ====================================================================
-- Helper Trigger for Order Reference (Oracle Syntax)
-- ====================================================================

CREATE OR REPLACE TRIGGER set_order_ref
BEFORE INSERT ON orders
FOR EACH ROW
WHEN (NEW.order_ref IS NULL)
BEGIN
:NEW.order_ref := 'COD-' || TO_CHAR(:NEW.order_date, 'YYYYMMDD') || '-' || TO_CHAR(:NEW.order_id);
END;
/
-- Automatically sets the order_ref for new orders after insertion.

-- ====================================================================
-- Create Indexes for Performance
-- ====================================================================
-- Foreign Keys
CREATE INDEX idx_products_category_id ON products(category_id);
CREATE INDEX idx_addresses_customer_id ON addresses(customer_id);
CREATE INDEX idx_orders_customer_id ON orders(customer_id);
CREATE INDEX idx_orders_shipping_address_id ON orders(shipping_address_id);
CREATE INDEX idx_orders_billing_address_id ON orders(billing_address_id);
CREATE INDEX idx_orders_promo_id ON orders(promo_id);
CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);
CREATE INDEX idx_web_sessions_customer_id ON web_sessions(customer_id);

-- Frequently Filtered/Sorted Columns
CREATE INDEX idx_orders_order_date ON orders(order_date);
CREATE INDEX idx_orders_order_status ON orders(order_status);
CREATE INDEX idx_orders_order_ref ON orders(order_ref);
CREATE INDEX idx_orders_shipped_at ON orders(shipped_at);
CREATE INDEX idx_orders_delivered_at ON orders(delivered_at);
CREATE INDEX idx_orders_cancelled_at ON orders(cancelled_at);
CREATE INDEX idx_customers_email ON customers(email);
CREATE INDEX idx_customers_phone ON customers(phone);
CREATE INDEX idx_products_sku ON products(sku);
CREATE INDEX idx_products_product_name ON products(product_name);
CREATE INDEX idx_web_sessions_session_start ON web_sessions(session_start);

-- Success message (for SQL*Plus)
PROMPT Database schema, function, trigger, and indexes created successfully.